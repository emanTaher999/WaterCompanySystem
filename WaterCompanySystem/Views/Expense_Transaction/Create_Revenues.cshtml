@model WaterCompanySystem.Models.Expense_Transaction
@{
    ViewBag.Title = "Create";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="~/Scripts/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.0.0"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>

    <div class="title-header">
        <h2 class="d-flex justify-content-center "><i class="mx-2 my-auto fa fa-hand-holding-water"></i>Expense_Transaction_Revenues الموردون </h2>
    </div>
    <br />
    @*<canvas id="myChart"></canvas>*@
    <fieldset class="card p-4 shadow">
        <legend class="bg-custom shadow  px-3">@WaterCompanySystem.Resourses.Page.Add</legend>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row my-2">
                    <div class="col-md-3">
                        @Html.Label(@WaterCompanySystem.Resourses.Page.transaction_date)
                        <div>
                            @Html.TextBoxFor(model => model.transaction_date, new { @class = "form-control", @type = "Date", @data_val_required = @WaterCompanySystem.Resourses.Page.Pleaseenterdate })
                            @Html.ValidationMessageFor(model => model.transaction_date, "", new { @class = "text-danger", id = "transaction_date" })
                            <span class="text-danger" data-valmsg-for="TransactionDate" data-valmsg-replace="true"></span>
                        </div>
                    </div>

                    <div class="col-md-3">
                        @Html.Label(@WaterCompanySystem.Resourses.Page.transaction_type_id)
                        <div>
                            @Html.DropDownListFor(model => model.transaction_type_id, (SelectList)ViewBag.transaction_type_id, htmlAttributes: new { @class = "form-control" })
                            @*@Html.DropDownListFor(model => model.transaction_type_id, ViewBag.transaction_type_id as SelectList, "", new { @class = "form-control" })*@
                            @Html.ValidationMessageFor(model => model.transaction_type_id, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-3">
                        @Html.Label(@WaterCompanySystem.Resourses.Page.SuplierTypes)
                        <div>
                            @Html.DropDownList("suplier_type_id",null, new { @class = "form-control", @id = "suplier_type_id", @name = "suplier_type_id" })
                            @Html.ValidationMessageFor(model => model.suplier_type_id, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="col-md-3">
                        @Html.Label(@WaterCompanySystem.Resourses.Page.quantity)
                        <div>
                            @Html.TextBoxFor(model => model.quantity, new { @class = "form-control", @id = "quantity", @name = "quantity", @data_val_required = "الرجاء إدخال الكمية" })

                            @*@Html.TextBoxFor(model => model.quantity, new { @class = "form-control", @id = "quantity", @name = "quantity"  ,  @data - val - required = "الرجاء إدخال الكمية" })*@
                            @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row my-2">
                    <div class="col-md-3">
                        @Html.Label(@WaterCompanySystem.Resourses.Page.amount)
                        <div>
                            @Html.TextBoxFor(model => model.amount, new { @class = "form-control", @id = "amount", @name = "amount" })
                            
                        </div>
                    </div>



                    <div class="col-md-3">
                        @Html.Label(@WaterCompanySystem.Resourses.Page.note)
                        <div>
                            @Html.TextBoxFor(model => model.note, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.note, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <br />
                <div align="center">
                    <input type="submit" value="@WaterCompanySystem.Resourses.Page.Create" id="CreateButton" class="btn btn-primary" />
                    <a href="/Expense_Transaction/Index_Revenues" class="btn btn-facebook">@WaterCompanySystem.Resourses.Page.BacktoList</a>
                </div>
            </div>
        }
    </fieldset>

    <script>
        @*$(document).ready(function () {
            // Function to initialize or update the Chart.js chart
            function initializeChart(price) {
                var ctx = document.getElementById('myChart');

                if (!ctx) {
                    console.error('Canvas element with id "myChart" not found.');
                    return;
                }

                ctx = ctx.getContext('2d'); // Get the 2D context

                if (window.myChart instanceof Chart) {
                    window.myChart.destroy(); // Destroy existing chart instance to avoid duplication
                }

                // Check if price is a valid number
                if (isNaN(price)) {
                    console.error('Invalid price value:', price);
                    return;
                }

                window.myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: ['Price'],
                        datasets: [{
                            label: 'Price Value',
                            data: [price],
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            $('#suplier_type_id').on('change', function () {
                var suplierTypeId = $(this).val();

                if (suplierTypeId) {
                    $.ajax({
                        url: '@Url.Action("GetPrice", "Expense_Transaction")',
                        type: 'GET',
                        data: { suplier_type_id: suplierTypeId },
                        success: function (response) {
                            if (response.price !== null) {
                                $('#price').val(response.price);
                                initializeChart(response.price);
                            } else {
                                $('#price').val('');
                                alert('Price not found for the selected supplier type.');
                            }
                        },
                        error: function () {
                            alert('Error fetching price. Please try again.');
                        }
                    });
                } else {
                    $('#price').val('');
                }
            });
        });

        //////////////////////////////////////////////////////////////////////////////////////////////
        document.addEventListener('DOMContentLoaded', function () {
            // Function to calculate and update the total
            function updateTotal() {

                var total = 0;
                // Get the quantity and price values
                var quantity = parseInt(document.getElementById('quantity').value) || 0;
                var price = parseFloat(document.getElementById('price').value) || 0;

                // Calculate the total
                total = quantity * price;

                // Update the total input field
                document.getElementById('amount').value = total.toFixed(2); // Display total with 2 decimal places
            }
            document.getElementById('quantity').addEventListener('input', updateTotal);

        });
        /////////////////////////////////////////////////////////////////////////////////////*@
    </script>
</body>
</html>
